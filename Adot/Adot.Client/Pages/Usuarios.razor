@page "/usuarios"
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row justify-content-center mb-5 mt-3">
        <div class="col-lg-10">
            <div class="card mb-3">
                <div class="card-header">
                    <button class="btn btn-primary float-end" @onclick="NavigateToAddUsuarioPage">
                        Novo Usuário
                    </button>
                </div>
                <div class="card-body text-center">
                    <h5 class="card-title">Iniciar nova conversa</h5>
                    <input type="text" class="form-control" placeholder="Pesquisar Conversa" />
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        @if (UsuariosList.Count > 0)
        {
            @foreach (var usuario in UsuariosList)
            {
                @if (usuario.Id > 1)
                {
                    <div class="col-12 mb-3">
                        <div class="card">
                            <div class="row g-0 align-items-center">
                                <div class="col-md-2">
                                    <img src="@usuario.Imagem" class="img-fluid rounded-start" alt="Imagem do usuário">
                                </div>
                                <div class="col-md-10">
                                    <div class="card-body d-flex justify-content-between align-items-center">
                                        <div>
                                            <h5 class="card-title">@usuario.Nome</h5>
                                            <p class="card-text">@usuario.Email</p>
                                        </div>
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-outline-info" @onclick="() => Edit(usuario)">Editar</button>
                                            <button class="btn btn-outline-danger" @onclick="() => Delete(usuario.Id)">Deletar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info text-center">Nenhum usuário encontrado</div>
            </div>
        }
    </div>
</div>

@code {
    private List<Usuario> UsuariosList { get; set; } = new();

    private async Task CarregaUsuarios()
    {
        var usuarios = await _usuarioService.GetAllUsuariosAsync();

        UsuariosList?.Clear();

        if (UsuariosList is null) return;

        foreach (var usuario in usuarios)
            UsuariosList.Add(usuario);
    }

    protected override async Task OnInitializedAsync()
    {
        await CarregaUsuarios();
    }

    private void NavigateToAddUsuarioPage()
    {
        _navigation.NavigateTo("manutencaousuario");
    }

    private void Edit(Usuario model)
    {
        _navigation.NavigateTo($"manutencaousuario/{model.Id}");
    }

    private async Task Delete(int id)
    {
        var usuario = await _usuarioService.DeleteUsuarioAsync(id);
        await CarregaUsuarios();
    }
}
